<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <configSections>
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
    </sectionGroup>
  </configSections>

  <spring>

    <context>
      <resource uri="config://spring/objects" />
    </context>

    <objects xmlns="http://www.springframework.net">
      <!--init main data model-->
      <object id="sensorListDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.SensorListDataModel,PConfigBase" singleton="true"></object>
      <object id="clockDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.ClockDataModel" singleton="true"></object>
      <object id="loggerDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.LoggerDataModel" singleton="true">
        <property name ="loggerID">
          <ref object="loggerIDDataModel"/>
        </property>
      </object>
      <object id="modemDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.ModemDataModel" singleton="true"></object>
      <object id="networkDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.NetworkDataModel" singleton="true"></object>
      <object id="powerDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.PowerDataModel" singleton="true"></object>
      <object id="probeInfoDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.ProbeInfoDataModel" singleton="true"></object>
      <object id="serialDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.ConnectDataModel" singleton="true">
        <property name ="loggerID">
          <ref object="loggerIDDataModel"/>
        </property>
      </object>

      <!--init other data model-->
      <object id="loggerIDDataModel" type="PConfigBase.BaseModelImpl.BaseDataModelImpl.LoggerIDDataModel,PConfigBase" singleton="true"></object>
      
      <!--init model repository with main data model instance-->
      <object id="modelRepository" type="ConfigFrame.AppInterface.ModelRepository" singleton="true">
        <property name="modelList">
          <list  element-type="ConfigFrame.BaseModel.IModel">
            <ref object="sensorListDataModel"/>
            <ref object="clockDataModel"/>
            <ref object="loggerDataModel"/>
            <ref object="modemDataModel"/>
            <ref object="networkDataModel"/>
            <ref object="powerDataModel"/>
            <ref object="probeInfoDataModel"/>
            <ref object="serialDataModel"/>
          </list>
        </property>  
      </object>

      <!--init model-protocol service-->
      <object id="configurationService" type="PConfigBase.ModelProtocolServiceImpl.ConfigurationService" singleton="true"></object>
      <object id="sensorTestService" type="PConfigBase.ModelProtocolServiceImpl.SensorTestService" singleton="true"></object>
      <object id="clockService" type="PConfigBase.ModelProtocolServiceImpl.ClockService" singleton="true"></object>
      <object id="loggerService" type="PConfigBase.ModelProtocolServiceImpl.LoggerService" singleton="true"></object>
      <object id="modemService" type="PConfigBase.ModelProtocolServiceImpl.ModemService" singleton="true"></object>
      <object id="networkService" type="PConfigBase.ModelProtocolServiceImpl.NetworkService" singleton="true"></object>
      <object id="powerService" type="PConfigBase.ModelProtocolServiceImpl.PowerService" singleton="true"></object>
      <object id="probeInfoService" type="PConfigBase.ModelProtocolServiceImpl.ProbeInfoService" singleton="true"></object>
      <object id="handShakeService" type="PConfigBase.ModelProtocolServiceImpl.HandShakeService" singleton="true"></object>

      <!--init serial port adapter-->
      <object id="serialAdapter" type="ConfigFrame.CommunicationService.SerialPortSupport.SerialPortAdapter, ConfigFrame" singleton="true">
      </object>
      
      
      <!--init communication service-->
      <object id="communicationService" type="ConfigFrame.CommunicationService.StandardCommunicationService, ConfigFrame" singleton="true">
        <property name ="serial">
          <ref object="serialAdapter"/>
        </property>
        <property name ="TimeOut" value="10000"/>
      </object>
      
      <!--init configuration controller-->
      <object id="configurationController" type="PConfigBase.AppInterfaceImpl.ConfigurationController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.SensorListDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="configurationService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init sensorTest controller-->
      <object id="sensorTestController" type="PConfigBase.AppInterfaceImpl.SensorTestController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.SensorListDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="sensorTestService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>
      
      <!--init clock controller-->
      <object id="clockController" type="PConfigBase.AppInterfaceImpl.ClockController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.ClockDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="clockService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init logger controller-->
      <object id="loggerController" type="PConfigBase.AppInterfaceImpl.LoggerController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.LoggerDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="loggerService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init modem controller-->
      <object id="modemController" type="PConfigBase.AppInterfaceImpl.ModemController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.ModemDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="modemService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init network controller-->
      <object id="networkController" type="PConfigBase.AppInterfaceImpl.NetworkController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.NetworkDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="networkService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init power controller-->
      <object id="powerController" type="PConfigBase.AppInterfaceImpl.PowerController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.PowerDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="powerService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init probeInfo controller-->
      <object id="probeInfoController" type="PConfigBase.AppInterfaceImpl.ProbeInfoController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.ProbeInfoDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="probeInfoService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init serial controller-->
      <object id="serialController" type="PConfigBase.AppInterfaceImpl.SerialController" singleton="true">
        <property name ="ModelType" value="PConfigBase.BaseModelImpl.BaseDataModelImpl.ConnectDataModel,PConfigBase"/>
        <property name ="ModelProtocolService">
          <ref object="handShakeService"/>
        </property>
        <property name ="CommService">
          <ref object="communicationService"/>
        </property>
      </object>

      <!--init common controller with other controller instance-->
      <object id="commonController" type="PConfigBase.AppInterfaceImpl.CommonController" singleton="true">
        <property name="controllerList">
          <list element-type="ConfigFrame.AppInterface.IController">
            <ref object="configurationController"/>
            <ref object="sensorTestController"/>
            <ref object="clockController"/>
            <ref object="loggerController"/>
            <ref object="modemController"/>
            <ref object="networkController"/>
            <ref object="powerController"/>
            <ref object="probeInfoController"/>
          </list> 
        </property>
        <property name ="ModelProtocolService">
          <ref object="probeInfoService"/>
        </property>
        <property name ="server">
          <ref object="localRunningServer"/>
        </property>
      </object>

      <!--init local running server-->
      <object id="localRunningServer" type="ConfigFrame.AppInterface.LocalRunningServer" singleton="true">
        <property name ="CommService">
          <ref object="communicationService"/>
        </property>
      </object>
      
      <!--init status manager-->
      <object id="statusManager" type="PConfigBase.Status.StatusManager" singleton="true"/>

      <!--init exception manager-->
      <object id="exceptionManager" type="PConfigBase.Status.ExceptionManager" singleton="true"/>

      <!--AOP-->
      <!--advice declare-->
      <object id="beforeAdvisor" type="Spring.Aop.Support.NameMatchMethodPointcutAdvisor, Spring.Aop">
        <property name="Advice">
          <object type="PConfigFacade.SpringFacade.Aop.Aspect.ConsoleLoggingBeforeAdvice, PConfigFacade">
            <property name="manager">
              <ref object="statusManager"/>
            </property>
          </object>
        </property>
        <property name="MappedNames">
          <list>
            <value>*execute</value>
          </list>
        </property>
      </object>

      <object id="afterAdvisor" type="Spring.Aop.Support.NameMatchMethodPointcutAdvisor, Spring.Aop">
        <property name="Advice">
          <object type="PConfigFacade.SpringFacade.Aop.Aspect.ConsoleLoggingAfterAdvice, PConfigFacade">
            <property name="manager">
              <ref object="statusManager"/>
            </property>
          </object>
        </property>
        <property name="MappedNames">
          <list>
            <value>*execute</value>
          </list>
        </property>
      </object>

      <object id="throwsAdvice" type="PConfigFacade.SpringFacade.Aop.Aspect.ConsoleLoggingThrowsAdvice, PConfigFacade">
        <property name="manager">
          <ref object="exceptionManager"/>
        </property>
      </object>
      
      <!-- Using ObjectNameAutoProxyCreator -->
      <!-- Apply 'aroundAdvisor' on all objects with id that ends by 'Command' -->
      <object type="Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator, Spring.Aop">
        <property name="ObjectNames">
          <list>
            <value>*Controller</value>
            <value>serialAdapter</value>
          </list>
        </property>
        <property name="InterceptorNames">
          <list>
            <!--<value>beforeAdvisor</value>
            <value>afterAdvisor</value>-->
            <!--<value>throwsAdvice</value>-->
          </list>
        </property>
      </object>

      <!--<object type="Spring.Aop.Framework.AutoProxy.ObjectNameAutoProxyCreator, Spring.Aop">
        <property name="ObjectNames">
          <list>
            <value>serialAdapter</value>
          </list>
        </property>
        <property name="InterceptorNames">
          <list>
            <value>throwsAdvice</value>
          </list>
        </property>
      </object>-->
    </objects>
  </spring>
</configuration>
